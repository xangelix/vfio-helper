---
# tasks file for iommu-setup
#TODO:- name: Check architecture
#TODO:- name: Check distribution

# Check dependencies
  pacman:
    name: util-linux

- name: Install pciutils
  pacman:
    name: pciutils

- name: Install grep
  pacman:
    name: grep

- name: Install python3
  pacman:
    name: python3

# Check virtualization support

- name: Check CPU vendor
  shell: "python3 {{ role_path }}/files/cpu-vendor-parser.py '{{ ansible_processor[1] }}'"
  register: cpu_vendor

- name: Print CPU vendor
  debug:
    msg: "{{ cpu_vendor.stdout }}"

- name: Check for IOMMU support for AMD
  when: cpu_vendor.stdout == "AMD"
  shell: "dmesg | grep 'AMD-Vi'"

- name: Check for IOMMU support for Intel
  when: cpu_vendor.stdout == "INTEL"
  shell: "dmesg | grep 'Virtualization Technology for Directed I/O'"

#TODO: On fail add to grub, prompt or bios SVM/iommu enable

# Read VGA PCI structure

- name: Look for attached VGA
  shell: "lspci -knn | grep VGA"
  register: lspci_knn_vga

- name: Print lspci output
  debug:
    msg: "{{ lspci_knn_vga.stdout_lines }}"

- name: Parse lscpi output
  shell: "python3 {{ role_path }}/files/lspci-parser.py '{{ lspci_knn_vga.stdout }}'"
  register: vga_main_buses

- name: Print main vga buses
  debug:
    msg: "{{ vga_main_buses.stdout_lines }}"

# Verify two or more VGA buses

- name: Verify two or more VGA buses    
  debug:
    msg: "{{ vga_main_buses.stdout_lines|length }} VGA buses detected"
  failed_when: vga_main_buses.stdout_lines|length < 2

# Prompt to select passthrough VGA bus by index

- pause:
    prompt: "Please select a passthrough vga bus"
  register: vga_bus_passthrough

- name: Print main vga IDs SXX
  debug:
    msg: "{{ vga_main_buses.stdout_lines[vga_bus_passthrough.user_input|int] }}"

#TODO: loop set remaining to host

- pause:
    prompt: "Please select a host vga bus"
  register: vga_bus_host

- name: Print main vga IDs SXX
  debug:
    msg: "{{ vga_main_buses.stdout_lines[vga_bus_host.user_input|int] }}"

# Read IOMMU groups

- name: Find IOMMU groups
  shell: "find /sys/kernel/iommu_groups/ -type l"
  register: iommu_groups

- name: Print iommu output
  debug:
    msg: "{{ iommu_groups.stdout }}"

# Read all PCI buses

- name: Look for attached pci
  shell: "lspci -knn"
  register: lspci_knn

- name: Print lspci knn output
  debug:
    msg: "{{ lspci_knn.stdout }}"

# Bind all PCI buses to their respective IOMMU groups

- name: Parse lscpi to bind IOMMU groups
  shell: "python3 {{ role_path }}/files/iommu_parser.py '{{ lspci_knn.stdout }}' '{{ iommu_groups.stdout }}'"
  register: iommu_pure

- name: Print binded buses
  debug:
    msg: "{{ iommu_pure.stdout_lines }}"

# Look for all IOMMU groups for each VGA bus

- name: Parse passthrough IOMMU groups
  shell: "python3 {{ role_path }}/files/passthrough-iommu-parser.py '{{ iommu_pure.stdout }}' '{{ vga_main_buses.stdout_lines[vga_bus_passthrough.user_input|int] }}'"
  register: iommu_coll

- name: Print passthrough IOMMU groups
  debug:
    msg: "{{ iommu_coll.stdout_lines }}"

- name: Parse host IOMMU groups
  shell: "python3 {{ role_path }}/files/passthrough-iommu-parser.py '{{ iommu_pure.stdout }}' '{{ vga_main_buses.stdout_lines[vga_bus_host.user_input|int] }}'"
  register: iommu_collb

- name: Print host IOMMU groups
  debug:
    msg: "{{ iommu_collb.stdout_lines }}"

# Check for collision between passthrough and host VGA IOMMU groups

- name: Parse passthrough and host IOMMU group collision   
  shell: "python3 {{ role_path }}/files/passthrough_iommu_collision.py '{{ iommu_coll.stdout }}' '{{ iommu_collb.stdout }}'"
  register: iommu_collisiona

- name: Print collisionA
  debug:
    msg: "Collision is {{ iommu_collisiona.stdout_lines[0] }}"
  failed_when: iommu_collisiona.stdout_lines[0] == "True"

# Read USB devices

#TODO: USB passthrough selection, mouse and keyboard especially

# Parse all VGA passthrough buses

- name: Parse passthrough buses
  shell: "python3 {{ role_path }}/files/binded_buses.py '{{ iommu_pure.stdout }}' '{{ vga_main_buses.stdout_lines[vga_bus_passthrough.user_input|int] }}'"
  register: binded_buses

- name: Print passthrough buses
  debug:
    msg: "{{ binded_buses.stdout_lines }}"

- name: Print passthrough buses
  debug:
    msg: "{{ item }}"
  loop: "{{ binded_buses.stdout_lines }}"

# Read passthrough PCI aliases

- name: Print aliases
  shell: "cat /sys/bus/pci/devices/{{ item }}/modalias"
  register: alias
  loop: "{{ binded_buses.stdout_lines }}"

- name: Print alias buses
  debug:
    msg: "{{ item.stdout }}"
  loop: "{{ alias.results }}"

# Append modprobe.d with aliases to vfio-pci

#TODO: Make file location variables

- name: Send aliases to vfio_pci.conf
  shell: "echo 'alias {{ item.stdout }} vfio-pci' >> /etc/modprobe.d/vfio_pci_dead.conf"
  loop: "{{ alias.results }}"

# Parse passthrough PCI IDs

- name: Parse passthrough PCI IDs
  shell: "python3 {{ role_path }}/files/lspci_id_parser.py '{{ iommu_pure.stdout }}' '{{ binded_buses.stdout }}'"
  register: pci_ids

- name: Print pci-ids
  debug:
    msg: "{{ pci_ids.stdout }}"

#TODO: Override if any duplicate IDs

# Append modprobe.d with options to vfio-pci IDs

- name: Send PCI ID options to vfio_pci.conf
  shell: "echo 'options vfio-pci ids={{ pci_ids.stdout }}' >> /etc/modprobe.d/vfio_pci_dead.conf"

- name: Send disable vga option to vfio_pci.conf
  shell: "echo 'options vfio-pci disable_vga=1' >> /etc/modprobe.d/vfio_pci_dead.conf"

- name: Send ignore msrs option to kvm.conf
  shell: "echo 'options kvm ignore_msrs=1' >> /etc/modprobe.d/kvm_dead.conf"

# Add modules to mkinitcpio.conf

- name: Add modules to mkinitcpio.conf
  shell: "sed -i '7s/.*/MODULES=\\(vfio vfio_iommu_type1 vfio_pci vfio_virqfd vhost-net\\)/' /home/cody/Downloads/mkinitcpio.conf"

#- name: Update initramfs
#  when: patched
#  shell: "mkinitcpio -p linux-vfio"

#- name: Update initramfs
#  when: not patched
#  shell: "mkinitcpio -p linux"

- name: Download virtio-win.iso
  get_url:
    url: https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/latest-virtio/virtio-win.iso
    dest: /home/cody/Downloads/virtio-win.iso
